{"version":3,"sources":["webpack:///./src/components/areas/index.js"],"names":["Areas","props","state","no_bed","no_bath","no_toilets","tno_bed","tno_bath","tno_toilets","currentArea","lat","lng","prices","areaPrice","mode","sort","setState","areas","majorAreasData","getAddressRange","getAreasRange","Predict","locations","map","specs","P","Math","round","e","topFilter","name","target","value","setTimeout","center","type","pairAreaPrice","A","i","a","p","sortedPairs","b","sp","length","parsedPrice","parseFloat","toLocaleString","React","Component"],"mappings":"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","file":"main.42175c10717d7a3f4ab5.hot-update.js","sourcesContent":["import React from 'react';\nimport majorAreasData from '../../areas';\n\nimport Predict from '../../utils/predict';\n\nclass Areas extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            no_bed: 1,\n            no_bath: 1,\n            no_toilets: 1,\n    \n            tno_bed: 1,\n            tno_bath: 1,\n            tno_toilets: 1,\n    \n            currentArea: {\n                lat: 6.5005,\n                lng: 3.3666\n            },\n            prices: [],\n            areaPrice: 0,\n            mode: true,\n            sort: 'high',\n        }\n    }\n    \n    componentDidMount () {    \n        this.setState({\n            areas: majorAreasData()\n        }, () => {\n            this.getAddressRange();\n            this.getAreasRange();\n        });\n    }\n    \n    async getAreasRange() {\n        const { no_bed, no_bath, no_toilets, mode } = this.state;\n    \n        const { prices } = await Predict({ \n            locations: this.state.areas.map(({ lat, lng }) => ({ lat, lng })), \n            specs: { no_bed, no_bath, no_toilets }\n        }, mode);\n    \n        this.setState({\n            prices: prices.map((P) => Math.round(P))\n        });\n    }\n    \n    async getAddressRange() {\n        const { tno_bed: no_bed, tno_bath: no_bath, tno_toilets: no_toilets, currentArea: { lat, lng }, mode } = this.state;\n    \n        const { prices } = await Predict({ \n            locations: [{ lat, lng }], \n            specs: { no_bed, no_bath, no_toilets }\n        }, mode);\n    \n        this.setState({\n            areaPrice:  Math.round(prices[0])\n        });\n    }\n    \n    updateOption(e, topFilter) {\n        let name = (!topFilter) ? e.target.name : `t${e.target.name}`;\n        let value = e.target.value; \n    \n        this.setState({\n            [name]: value\n        }, () => {\n            setTimeout(\n                (!topFilter) ? this.getAreasRange : this.getAddressRange\n            , 500);\n        });\n    }\n    \n    handleChange() {\n        this.setState({\n            mode: !this.state.mode\n        }, () => {\n            this.getAddressRange();\n            this.getAreasRange();\n        });\n    }\n    \n    centerChange(center) {\n        this.setState({ \n        currentArea: {\n            lat: center.lat(),\n            lng: center.lng()\n        }\n        }, this.getAddressRange);\n    }\n    \n    sort(e) {\n        let type = e.target.value;\n        let pairAreaPrice = this.state.areas.map((A, i)=> ({ a: A, p: this.state.prices[i]}))\n        \n        let sortedPairs = (type !== 'high') ? \n            pairAreaPrice.sort((a, b) => a.p - b.p) : \n            pairAreaPrice.sort((a, b) => b.p - a.p);\n\n        this.setState({\n            prices: sortedPairs.map((sp) => sp.p),\n            areas: sortedPairs.map((sp) => sp.a)\n        });\n    }\n\n    render () {\n        const { areas, prices } = this.state;\n\n        return (\n            <div className=\"input-container col-lg-6 col-md-6 col-sm-6 col-xs-12\">        \n                {prices.length > 1 && <ul className=\"areas-list\" type=\"none\">\n                    {areas.map((a, i) => {\n                        const parsedPrice = parseFloat(prices[i]);\n                        \n                        if (parsedPrice < 1) return null;\n\n                        return (\n                            <li key={i}>\n                                {a.name}\n                                <div className=\"price\">\n                                    <span>â‚¦{parsedPrice.toLocaleString('en')}</span>\n                                </div>\n                            </li>\n                        )\n                    })}\n                </ul>}\n            </div>\n        );\n    }\n}\n\nexport default Areas;"],"sourceRoot":""}